@using PollyBookApp_ST2.Models.ReadingItems
@model PollyBookApp_ST2.Models.ReadingItems.ReadingItem
@{
    ViewData["Title"] = "Edit Reading Item";
}

<div class="container mt-5">
    <h2>Edit Reading Item</h2>

    <form id="editItemForm" asp-action="Edit" asp-route-id="@Model.Id" enctype="multipart/form-data" onsubmit="return validateForm()">
        <input type="hidden" asp-for="Id" />

        <div class="form-group">
            <label asp-for="Title" class="control-label label"></label>
            <input asp-for="Title" id="title" class="form-control" />
            <span class="text-danger error" id="titleError"></span>
        </div>

        <div class="form-group">
            <label asp-for="Price" class="control-label label"></label>
            <input asp-for="Price" id="price" class="form-control" />
            <span class="text-danger error" id="priceError"></span>
        </div>

        <div class="form-group">
            <label asp-for="Description" class="control-label label"></label>
            <textarea asp-for="Description" id="description" class="form-control"></textarea>
            <span class="text-danger error" id="descriptionError"></span>
        </div>

        <div class="form-group">
            <label class="control-label label">Item Picture</label>
            <input type="file" name="pictureFile" class="form-control" accept="image/*" />
        </div>

        <div id="specificFields">
            @if (Model is Book book)
            {
                <div class="form-group">
                    <label class="label">Author:</label>
                    <input type="text" id="author" name="author" class="form-control" value="@(book.Author)" />
                    <span class="text-danger error" id="authorError"></span>
                </div>
                <div class="form-group">
                    <label class="label">ISBN:</label>
                    <input type="text" id="isbn" name="isbn" class="form-control" value="@(book.ISBN)" />
                    <span class="text-danger error" id="isbnError"></span>
                </div>
                <div class="form-group">
                    <label class="label">Genre:</label>
                    <select name="genre" class="form-control">
                        <option value="">@book.Genre</option>
                        @foreach (var genre in ViewBag.Genre)
                        {
                            var isSelected = (book.Genre.ToString() == genre.ToString())
                            ? "selected"
                            : "";

                            <option value="@genre"> @isSelected>@genre</option>
                        }
                    </select>
                    <small id="genreError" class="text-danger"></small>

                </div>
            }
            @if (Model is Magazine mag)
            {
                <div class="form-group">
                    <label class="label">Publisher:</label>
                    <input type="text" id="publisher" name="publisher" class="form-control" value="@(mag.Publisher)" />
                    <span class="text-danger error" id="publisherError"></span>
                </div>
                <div class="form-group">
                    <label class="label">Domain:</label>
                    <select name="domain" class="form-control">
                        <option value="">@mag.Domain</option>
                        @foreach (var domain in ViewBag.Domain)
                        {
                            var isSelected = (mag.Domain.ToString() == domain.ToString())
                            ? "selected"
                            : "";

                            <option value="@domain"> @isSelected>@domain</option>
                        }
                    </select>
                    <small id="domainError" class="text-danger"></small>
                </div>
            }

            @if (Model is Comics com)
            {
                <div class="form-group">
                    <label class="label">Style:</label>
                    <select name="style" class="form-control">
                        <option value="">@com.Style</option>
                        @foreach (var style in ViewBag.Style)
                        {
                            var isSelected = (com.Style.ToString() == style.ToString())
                            ? "selected"
                            : "";

                            <option value="@style"> @isSelected>@style</option>
                        }
                    </select>
                    <small id="styleError" class="text-danger"></small>
                </div>
                <div class="form-group">
                    <label class="label">Edition:</label>
                    <select name="edition" class="form-control">
                        <option value="">@com.Edition</option>
                        @foreach (var edition in ViewBag.Edition)
                        {
                            var isSelected = (com.Edition.ToString() == edition.ToString())
                            ? "selected"
                            : "";

                            <option value="@edition"> @isSelected>@edition</option>
                        }
                    </select>
                    <small id="editionError" class="text-danger"></small>
                </div>
            }
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-warning">Save Changes</button>
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
        </div>
    </form>
</div>


<script>
    function validateForm() {
        let isValid = true;

        document.querySelectorAll('.error').forEach(el => el.textContent = '');

        const title = document.getElementById("title").value.trim();
        if (!title) {
            document.getElementById("titleError").textContent = "Title is required.";
            isValid = false;
        }

        const price = parseFloat(document.getElementById("price").value);
        if (isNaN(price) || price <= 0) {
            document.getElementById("priceError").textContent = "Price must be a positive number.";
            isValid = false;
        }

        const description = document.getElementById("description").value.trim();
        if (description.length < 10) {
            document.getElementById("descriptionError").textContent = "Description must be at least 10 characters.";
            isValid = false;
        }

        const itemType = '@(Model.GetType().Name)';

        if (itemType === "Book") {
            const author = document.getElementById("author").value.trim();
            const isbn = document.getElementById("isbn").value.trim();
            const isbnPattern = /^(97(8|9))?\d{9}(\d|X)$/;

            if (!author) {
                document.getElementById("authorError").textContent = "Author is required for books.";
                isValid = false;
            }

            if (!isbn || !isbnPattern.test(isbn)) {
                document.getElementById("isbnError").textContent = "A valid ISBN is required.";
                isValid = false;
            }
        } else if (itemType === "Magazine") {
            const publisher = document.getElementById("publisher").value.trim();
            if (!publisher) {
                document.getElementById("publisherError").textContent = "Publisher is required for magazines.";
                isValid = false;
            }
        } 

        return isValid;
    }

    window.onload = () => {
        showSpecificFields();
    };

    function showSpecificFields() {
        const specificFields = document.getElementById("specificFields");
        specificFields.style.display = "block"; 
    }
</script>


<style>
    .container {
        max-width: 600px;
        margin: auto;
        padding: 20px;
        background: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    h2 {
        text-align: center;
        margin-bottom: 20px;
    }

    .btn-warning, .btn-secondary {
        width: 100%;
        margin-top: 0.5rem;
        margin-bottom: 0.5rem
    }
    .error {
        color: red;
        font-size: 0.9em;
    }
</style>
